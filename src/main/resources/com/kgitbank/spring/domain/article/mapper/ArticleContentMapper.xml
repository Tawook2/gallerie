<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kgitbank.spring.domain.article.mapper.ArticleContentMapper">
	
	<select id="selectArticleWithWriterInfoById" resultType="com.kgitbank.spring.domain.article.dto.ArticleDto">
		SELECT
		    a.*, 
		    m.id as writer_id, 
		    m.name as writer_name, 
		    m.img_path, 
		    (SELECT COUNT(*) FROM article_like WHERE article_id= #{id}) as like_count
		FROM
		    articles a
		    INNER JOIN members m
		    ON a.writer_seq_id = m.seq_id
		WHERE a.id = #{id}
	</select>
	
	<select id="selectFileByArticleId" resultType="FileVO">
		SELECT 
			* 
		FROM 
			files 
		WHERE 
			article_id = #{articleId}
		ORDER BY num
	</select>
	
	<select id="selectGalleryByWriterSeqId" resultType="com.kgitbank.spring.domain.article.dto.GalleryDto">
		SELECT
		    a.*, 
		    alc.like_count,
		    cc.comment_count,
		    f.img_path
		FROM
		    articles a
		    LEFT OUTER JOIN
		    (SELECT article_id, COUNT(*) as like_count FROM article_like GROUP BY article_id) alc
		    ON a.id = alc.article_id
		    LEFT OUTER JOIN
		    (SELECT article_id, COUNT(*) as comment_count FROM comments GROUP BY article_id) cc
		    ON a.id = cc.article_id
		    LEFT OUTER JOIN
		    (SELECT article_id, img_path FROM files WHERE num = 1) f
		    ON a.id = f.article_id
		WHERE
		    writer_seq_id = #{writerSeqId}
		ORDER BY id DESC
		OFFSET #{articleIndex} * #{articleCount} ROWS FETCH NEXT #{articleCount} ROWS ONLY
	</select>
	
	<select id="selectGalleryByTagName" resultType="com.kgitbank.spring.domain.article.dto.GalleryDto">
		SELECT DISTINCT
		    a.article_id as id, 
		    alc.like_count,
		    cc.comment_count,
		    f.img_path
		FROM
		    tag a
		    LEFT OUTER JOIN
		    (SELECT article_id, COUNT(*) as like_count FROM article_like GROUP BY article_id) alc
		    ON a.article_id = alc.article_id
		    LEFT OUTER JOIN
		    (SELECT article_id, COUNT(*) as comment_count FROM comments GROUP BY article_id) cc
		    ON a.article_id = cc.article_id
		    LEFT OUTER JOIN
		    (SELECT article_id, img_path FROM files WHERE num = 1) f
		    ON a.article_id = f.article_id
		WHERE
		    tag_name LIKE #{tagName}
		ORDER BY a.article_id DESC
		OFFSET #{articleIndex} * #{articleCount} ROWS FETCH NEXT #{articleCount} ROWS ONLY
	</select>
	
	<select id="selectTotalCountOfArticlesByWriterSeqId" resultType="int">
		SELECT COUNT(*) FROM articles WHERE writer_seq_id = #{writerSeqId}
	</select>
	
	<select id="selectTotalCountOfArticlesByTagName" resultType="int">
		SELECT 
		    COUNT(*) 
		FROM (
		    SELECT DISTINCT 
		    	tag.article_id 
		    FROM 
		    	tag 
		    WHERE 
		    	tag_name LIKE #{tagName}
		)
	</select>
	
	<delete id="deleteArticleById">
		DELETE FROM articles WHERE id = #{id}
	</delete>
	
	<insert id="insertArticle">
		INSERT INTO
			articles
		VALUES (
			article_seq.nextval, #{writerSeqId}, #{content}, sysdate
		)
	</insert>
	
	<insert id="insertTags">
		<selectKey keyProperty="articleId" resultType="int" order="BEFORE">
			SELECT article_seq.currval FROM dual
		</selectKey>
		<foreach collection="list" item="tag" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
			INTO tag (
				article_id, tag_name
			) VALUES (
				#{articleId}, #{tag.tagName}
			)
   		</foreach>
	</insert>
	
	<insert id="insertFiles">
		<selectKey keyProperty="articleId" resultType="int" order="BEFORE">
			SELECT article_seq.currval FROM dual
		</selectKey>
		<foreach collection="list" item="file" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
			INTO files (
				article_id, img_path, num
			) VALUES (
				#{articleId}, #{file.imgPath}, #{file.num}
			)
   		</foreach>
	</insert>
	
	<select id="selectCountLikeByMemberSeqIdAndArticleId" resultType="int">
		SELECT 
			COUNT(*) 
		FROM 
			article_like 
		WHERE member_seq_id = #{memberSeqId} AND article_id = #{articleId}
	</select>
	
	<insert id="insertLike">
		INSERT INTO
			article_like(
				article_id, 
				member_seq_id
		) VALUES (
			#{articleId},
			#{memberSeqId}
		)
	</insert>
	
	<delete id="deleteLike">
		DELETE FROM
			article_like
		WHERE
			article_id = #{articleId} AND member_seq_id = #{memberSeqId}
	</delete>
	
</mapper>